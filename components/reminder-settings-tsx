"use client"

import type React from "react"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Switch } from "@/components/ui/switch"
import { Textarea } from "@/components/ui/textarea"
import { toast } from "@/components/ui/use-toast"
import { saveSettings } from "@/lib/actions"

export default function ReminderSettings() {
  const [isLoading, setIsLoading] = useState(false)
  const [settings, setSettings] = useState({
    googleSheetId: "",
    googleSheetRange: "A2:E100",
    reminderHours: 24,
    enableWhatsApp: true,
    enableSMS: false,
    reminderTemplate:
      "Hola {nombre}, le recordamos su cita para mañana {fecha} a las {hora}. Por favor confirme su asistencia. Gracias.",
  })

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault()
    setIsLoading(true)

    try {
      await saveSettings(settings)
      toast({
        title: "Configuración guardada",
        description: "Los cambios han sido aplicados correctamente.",
      })
    } catch (error) {
      toast({
        title: "Error",
        description: "No se pudo guardar la configuración.",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div className="space-y-4">
        <div className="grid gap-2">
          <Label htmlFor="googleSheetId">ID de Google Sheet</Label>
          <Input
            id="googleSheetId"
            placeholder="1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms"
            value={settings.googleSheetId}
            onChange={(e) => setSettings({ ...settings, googleSheetId: e.target.value })}
          />
          <p className="text-xs text-muted-foreground">El ID se encuentra en la URL de tu Google Sheet</p>
        </div>

        <div className="grid gap-2">
          <Label htmlFor="googleSheetRange">Rango de celdas</Label>
          <Input
            id="googleSheetRange"
            placeholder="A2:E100"
            value={settings.googleSheetRange}
            onChange={(e) => setSettings({ ...settings, googleSheetRange: e.target.value })}
          />
        </div>

        <div className="grid gap-2">
          <Label htmlFor="reminderHours">Horas de anticipación</Label>
          <Input
            id="reminderHours"
            type="number"
            min="1"
            max="72"
            value={settings.reminderHours}
            onChange={(e) => setSettings({ ...settings, reminderHours: Number.parseInt(e.target.value) })}
          />
          <p className="text-xs text-muted-foreground">Cuántas horas antes de la cita se enviará el recordatorio</p>
        </div>
      </div>

      <Card>
        <CardContent className="pt-6">
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label htmlFor="whatsapp">WhatsApp</Label>
                <p className="text-xs text-muted-foreground">Enviar recordatorios por WhatsApp</p>
              </div>
              <Switch
                id="whatsapp"
                checked={settings.enableWhatsApp}
                onCheckedChange={(checked) => setSettings({ ...settings, enableWhatsApp: checked })}
              />
            </div>

            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label htmlFor="sms">SMS</Label>
                <p className="text-xs text-muted-foreground">Enviar recordatorios por SMS</p>
              </div>
              <Switch
                id="sms"
                checked={settings.enableSMS}
                onCheckedChange={(checked) => setSettings({ ...settings, enableSMS: checked })}
              />
            </div>
          </div>
        </CardContent>
      </Card>

      <div className="space-y-2">
        <Label htmlFor="template">Plantilla de mensaje</Label>
        <Textarea
          id="template"
          placeholder="Escriba la plantilla del mensaje..."
          value={settings.reminderTemplate}
          onChange={(e) => setSettings({ ...settings, reminderTemplate: e.target.value })}
          className="min-h-[100px]"
        />
        <p className="text-xs text-muted-foreground">
          Utilice {"{nombre}"}, {"{fecha}"}, {"{hora}"} como variables que serán reemplazadas
        </p>
      </div>

      <Button type="submit" className="w-full" disabled={isLoading}>
        {isLoading ? "Guardando..." : "Guardar configuración"}
      </Button>
    </form>
  )
}

